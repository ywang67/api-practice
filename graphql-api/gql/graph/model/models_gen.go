// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type CableModem struct {
	Mac                string         `json:"mac"`
	CpeMac             *string        `json:"cpeMac,omitempty"`
	MacDomain          *string        `json:"macDomain,omitempty"`
	CableModemIndex    *int32         `json:"cableModemIndex,omitempty"`
	ConfigFile         *string        `json:"configFile,omitempty"`
	Model              *string        `json:"model,omitempty"`
	FiberNode          *string        `json:"fiberNode,omitempty"`
	Ipv4               *string        `json:"ipv4,omitempty"`
	Ipv6               *string        `json:"ipv6,omitempty"`
	CpeIpv4            *string        `json:"cpeIpv4,omitempty"`
	Transponder        *string        `json:"transponder,omitempty"`
	DocsisVersion      *DocsisVersion `json:"docsisVersion,omitempty"`
	Ppod               *string        `json:"ppod,omitempty"`
	Fqdn               *string        `json:"fqdn,omitempty"`
	State              *State         `json:"state,omitempty"`
	NotFoundDate       *string        `json:"notFoundDate,omitempty"`
	RegState           *int32         `json:"regState,omitempty"`
	FnName             *string        `json:"fnName,omitempty"`
	NumberOfGenerators *int32         `json:"numberOfGenerators,omitempty"`
	RpdName            *string        `json:"rpdName,omitempty"`
	UpdatedAt          *string        `json:"updatedAt,omitempty"`
	Bootr              *string        `json:"bootr,omitempty"`
	Vendor             *string        `json:"vendor,omitempty"`
	SwRev              *string        `json:"swRev,omitempty"`
	OltName            *string        `json:"oltName,omitempty"`
	PonName            *string        `json:"ponName,omitempty"`
	UpdatedAtTs        *int32         `json:"updatedAtTs,omitempty"`
	IsCpe              *bool          `json:"isCPE,omitempty"`
	CmtsType           *string        `json:"cmtsType,omitempty"`
	// This attribute represents the current type of device. metroe(1)
	DeviceType *int32 `json:"deviceType,omitempty"`
}

type CableModemsConnection struct {
	Edges    []*CableModem `json:"edges"`
	PageInfo *PageInfo     `json:"pageInfo,omitempty"`
}

type CableModemsFilter struct {
	DocsisVersion *DocsisVersion    `json:"docsisVersion,omitempty"`
	DsInterface   *string           `json:"dsInterface,omitempty"`
	Fqdn          *string           `json:"fqdn,omitempty"`
	Ppod          *string           `json:"ppod,omitempty"`
	FiberNode     *string           `json:"fiberNode,omitempty"`
	Transponder   *bool             `json:"transponder,omitempty"`
	MacDomain     *string           `json:"macDomain,omitempty"`
	MacAddress    *StringFilterEqIn `json:"macAddress,omitempty"`
}

type Mutation struct {
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type PageInfo struct {
	HasNextPage bool   `json:"hasNextPage"`
	EndCursor   string `json:"endCursor"`
}

type Query struct {
}

type StringFilterEqIn struct {
	Eq *string   `json:"eq,omitempty"`
	In []*string `json:"in,omitempty"`
}

type Todo struct {
	ID   string `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
	User *User  `json:"user"`
}

type TsCableDownstream struct {
	IfIndex            *int32  `json:"ifIndex,omitempty"`
	ChannelPower       *string `json:"channelPower,omitempty"`
	Unerroreds         *string `json:"unerroreds,omitempty"`
	Correcteds         *string `json:"correcteds,omitempty"`
	Uncorrectables     *string `json:"uncorrectables,omitempty"`
	SignalNoiseDecibel *string `json:"signalNoiseDecibel,omitempty"`
}

type TsCableUpstream struct {
	IfIndex          *int32  `json:"ifIndex,omitempty"`
	StatusTxPower    *string `json:"statusTxPower,omitempty"`
	StatusT3Timeouts *int32  `json:"statusT3Timeouts,omitempty"`
	StatusT4Timeouts *int32  `json:"statusT4Timeouts,omitempty"`
}

type TsCableUpstreamStatus struct {
	IfDescr *string `json:"ifDescr,omitempty"`
	Snr     *string `json:"snr,omitempty"`
	RxPower *string `json:"rxPower,omitempty"`
}

type TsCmDevice struct {
	Mac                 *string                  `json:"mac,omitempty"`
	Time                *int32                   `json:"time,omitempty"`
	LostSync            *int32                   `json:"lostSync,omitempty"`
	Resets              *int32                   `json:"resets,omitempty"`
	CableDownstream     []*TsCableDownstream     `json:"cableDownstream,omitempty"`
	CableUpstream       []*TsCableUpstream       `json:"cableUpstream,omitempty"`
	CableUpstreamStatus []*TsCableUpstreamStatus `json:"cableUpstreamStatus,omitempty"`
	OfdmDownstream      []*TsOfdmDownstream      `json:"ofdmDownstream,omitempty"`
}

type TsCmOfdmChannelPower struct {
	ChannelBandIndex *int32  `json:"channelBandIndex,omitempty"`
	CenterFrequency  *int32  `json:"centerFrequency,omitempty"`
	RxPower          *string `json:"rxPower,omitempty"`
}

type TsCmOfdmChannelProfileStats struct {
	CmtsProfileID         *int32  `json:"cmtsProfileId,omitempty"`
	CorrectedCodewords    *string `json:"correctedCodewords,omitempty"`
	UncorrectableCodeword *string `json:"uncorrectableCodeword,omitempty"`
	TotalCodewords        *string `json:"totalCodewords,omitempty"`
}

type TsOfdmDownstream struct {
	IfIndex            *int32                         `json:"ifIndex,omitempty"`
	RxMerMean          *string                        `json:"rxMerMean,omitempty"`
	RxMer2ndPercentile *string                        `json:"rxMer2ndPercentile,omitempty"`
	ProfileStats       []*TsCmOfdmChannelProfileStats `json:"profileStats,omitempty"`
	OfdmDsChannelPower []*TsCmOfdmChannelPower        `json:"ofdmDsChannelPower,omitempty"`
}

type TsRegStateDevice struct {
	Mac      *string `json:"mac,omitempty"`
	Time     *int32  `json:"time,omitempty"`
	RegState *int32  `json:"regState,omitempty"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type DocsisVersion string

const (
	DocsisVersionDocsis3  DocsisVersion = "Docsis3"
	DocsisVersionDocsis31 DocsisVersion = "Docsis31"
	DocsisVersionDocsis4  DocsisVersion = "Docsis4"
)

var AllDocsisVersion = []DocsisVersion{
	DocsisVersionDocsis3,
	DocsisVersionDocsis31,
	DocsisVersionDocsis4,
}

func (e DocsisVersion) IsValid() bool {
	switch e {
	case DocsisVersionDocsis3, DocsisVersionDocsis31, DocsisVersionDocsis4:
		return true
	}
	return false
}

func (e DocsisVersion) String() string {
	return string(e)
}

func (e *DocsisVersion) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DocsisVersion(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DocsisVersion", str)
	}
	return nil
}

func (e DocsisVersion) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *DocsisVersion) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e DocsisVersion) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type HistoricalPeriod string

const (
	HistoricalPeriodMinutely HistoricalPeriod = "Minutely"
	HistoricalPeriodHourly   HistoricalPeriod = "Hourly"
)

var AllHistoricalPeriod = []HistoricalPeriod{
	HistoricalPeriodMinutely,
	HistoricalPeriodHourly,
}

func (e HistoricalPeriod) IsValid() bool {
	switch e {
	case HistoricalPeriodMinutely, HistoricalPeriodHourly:
		return true
	}
	return false
}

func (e HistoricalPeriod) String() string {
	return string(e)
}

func (e *HistoricalPeriod) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HistoricalPeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HistoricalPeriod", str)
	}
	return nil
}

func (e HistoricalPeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *HistoricalPeriod) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e HistoricalPeriod) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PollerType string

const (
	PollerTypeLowSpectrum          PollerType = "LOW_SPECTRUM"
	PollerTypeFullSpectrum         PollerType = "FULL_SPECTRUM"
	PollerTypeCmts                 PollerType = "CMTS"
	PollerTypeCmCert               PollerType = "CM_CERT"
	PollerTypeRegState             PollerType = "REG_STATE"
	PollerTypeRxMer                PollerType = "RX_MER"
	PollerTypePowerSupply          PollerType = "POWER_SUPPLY"
	PollerTypeHmsTraps             PollerType = "HMS_TRAPS"
	PollerTypeCmAttributeDiscovery PollerType = "CM_ATTRIBUTE_DISCOVERY"
	PollerTypeMtaInventory         PollerType = "MTA_INVENTORY"
)

var AllPollerType = []PollerType{
	PollerTypeLowSpectrum,
	PollerTypeFullSpectrum,
	PollerTypeCmts,
	PollerTypeCmCert,
	PollerTypeRegState,
	PollerTypeRxMer,
	PollerTypePowerSupply,
	PollerTypeHmsTraps,
	PollerTypeCmAttributeDiscovery,
	PollerTypeMtaInventory,
}

func (e PollerType) IsValid() bool {
	switch e {
	case PollerTypeLowSpectrum, PollerTypeFullSpectrum, PollerTypeCmts, PollerTypeCmCert, PollerTypeRegState, PollerTypeRxMer, PollerTypePowerSupply, PollerTypeHmsTraps, PollerTypeCmAttributeDiscovery, PollerTypeMtaInventory:
		return true
	}
	return false
}

func (e PollerType) String() string {
	return string(e)
}

func (e *PollerType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PollerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PollerType", str)
	}
	return nil
}

func (e PollerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PollerType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PollerType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type State string

const (
	StateOnline  State = "Online"
	StateOffline State = "Offline"
)

var AllState = []State{
	StateOnline,
	StateOffline,
}

func (e State) IsValid() bool {
	switch e {
	case StateOnline, StateOffline:
		return true
	}
	return false
}

func (e State) String() string {
	return string(e)
}

func (e *State) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = State(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid State", str)
	}
	return nil
}

func (e State) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *State) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e State) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
