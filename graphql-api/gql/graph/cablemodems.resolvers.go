package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"api-project/graphql-api/gql/graph/cablemodems"
	"api-project/graphql-api/gql/graph/model"
	"context"
	"fmt"
)

// ByMac is the resolver for the byMac field.
func (r *cableModemsResolver) ByMac(ctx context.Context, obj *cablemodems.CableModems, macAddress []string) ([]*model.CableModem, error) {
	return cablemodems.ByMacRds(ctx, r.DBRead, macAddress)
}

// ByCmts is the resolver for the byCmts field.
func (r *cableModemsResolver) ByCmts(ctx context.Context, obj *cablemodems.CableModems, cmts string, state *model.State, docsis *model.DocsisVersion, single *bool) ([]*model.CableModem, error) {
	panic(fmt.Errorf("not implemented: ByCmts - byCmts"))
}

// ByPoller is the resolver for the byPoller field.
func (r *cableModemsResolver) ByPoller(ctx context.Context, obj *cablemodems.CableModems, poller model.PollerType, cmts string, state *model.State, docsis *model.DocsisVersion) ([]*model.CableModem, error) {
	panic(fmt.Errorf("not implemented: ByPoller - byPoller"))
}

// Paged is the resolver for the paged field.
func (r *cableModemsResolver) Paged(ctx context.Context, obj *cablemodems.CableModems, filter *model.CableModemsFilter, first *int32, after *string) (*model.CableModemsConnection, error) {
	panic(fmt.Errorf("not implemented: Paged - paged"))
}

// HistoricalRegState is the resolver for the historicalRegState field.
func (r *cableModemsResolver) HistoricalRegState(ctx context.Context, obj *cablemodems.CableModems, mac []string, period model.HistoricalPeriod) ([]*model.TsRegStateDevice, error) {
	panic(fmt.Errorf("not implemented: HistoricalRegState - historicalRegState"))
}

// HistoricalCm is the resolver for the historicalCm field.
func (r *cableModemsResolver) HistoricalCm(ctx context.Context, obj *cablemodems.CableModems, mac []string) ([]*model.TsCmDevice, error) {
	panic(fmt.Errorf("not implemented: HistoricalCm - historicalCm"))
}

// CableModems returns CableModemsResolver implementation.
func (r *Resolver) CableModems() CableModemsResolver { return &cableModemsResolver{r} }

type cableModemsResolver struct{ *Resolver }
