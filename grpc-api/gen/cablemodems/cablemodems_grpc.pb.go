// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: cablemodems/cablemodems.proto

package cablemodems

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CableModemService_ByMac_FullMethodName              = "/cablemodems.CableModemService/ByMac"
	CableModemService_ByCmts_FullMethodName             = "/cablemodems.CableModemService/ByCmts"
	CableModemService_ByPoller_FullMethodName           = "/cablemodems.CableModemService/ByPoller"
	CableModemService_Paged_FullMethodName              = "/cablemodems.CableModemService/Paged"
	CableModemService_HistoricalRegState_FullMethodName = "/cablemodems.CableModemService/HistoricalRegState"
	CableModemService_HistoricalCm_FullMethodName       = "/cablemodems.CableModemService/HistoricalCm"
)

// CableModemServiceClient is the client API for CableModemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CableModemServiceClient interface {
	ByMac(ctx context.Context, in *ByMacRequest, opts ...grpc.CallOption) (*ByMacResponse, error)
	ByCmts(ctx context.Context, in *ByCmtsRequest, opts ...grpc.CallOption) (*ByCmtsResponse, error)
	ByPoller(ctx context.Context, in *ByPollerRequest, opts ...grpc.CallOption) (*ByPollerResponse, error)
	Paged(ctx context.Context, in *PagedRequest, opts ...grpc.CallOption) (*PagedResponse, error)
	HistoricalRegState(ctx context.Context, in *HistoricalRegStateRequest, opts ...grpc.CallOption) (*HistoricalRegStateResponse, error)
	HistoricalCm(ctx context.Context, in *HistoricalCmRequest, opts ...grpc.CallOption) (*HistoricalCmResponse, error)
}

type cableModemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCableModemServiceClient(cc grpc.ClientConnInterface) CableModemServiceClient {
	return &cableModemServiceClient{cc}
}

func (c *cableModemServiceClient) ByMac(ctx context.Context, in *ByMacRequest, opts ...grpc.CallOption) (*ByMacResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ByMacResponse)
	err := c.cc.Invoke(ctx, CableModemService_ByMac_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableModemServiceClient) ByCmts(ctx context.Context, in *ByCmtsRequest, opts ...grpc.CallOption) (*ByCmtsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ByCmtsResponse)
	err := c.cc.Invoke(ctx, CableModemService_ByCmts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableModemServiceClient) ByPoller(ctx context.Context, in *ByPollerRequest, opts ...grpc.CallOption) (*ByPollerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ByPollerResponse)
	err := c.cc.Invoke(ctx, CableModemService_ByPoller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableModemServiceClient) Paged(ctx context.Context, in *PagedRequest, opts ...grpc.CallOption) (*PagedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PagedResponse)
	err := c.cc.Invoke(ctx, CableModemService_Paged_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableModemServiceClient) HistoricalRegState(ctx context.Context, in *HistoricalRegStateRequest, opts ...grpc.CallOption) (*HistoricalRegStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalRegStateResponse)
	err := c.cc.Invoke(ctx, CableModemService_HistoricalRegState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableModemServiceClient) HistoricalCm(ctx context.Context, in *HistoricalCmRequest, opts ...grpc.CallOption) (*HistoricalCmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalCmResponse)
	err := c.cc.Invoke(ctx, CableModemService_HistoricalCm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CableModemServiceServer is the server API for CableModemService service.
// All implementations must embed UnimplementedCableModemServiceServer
// for forward compatibility.
type CableModemServiceServer interface {
	ByMac(context.Context, *ByMacRequest) (*ByMacResponse, error)
	ByCmts(context.Context, *ByCmtsRequest) (*ByCmtsResponse, error)
	ByPoller(context.Context, *ByPollerRequest) (*ByPollerResponse, error)
	Paged(context.Context, *PagedRequest) (*PagedResponse, error)
	HistoricalRegState(context.Context, *HistoricalRegStateRequest) (*HistoricalRegStateResponse, error)
	HistoricalCm(context.Context, *HistoricalCmRequest) (*HistoricalCmResponse, error)
	mustEmbedUnimplementedCableModemServiceServer()
}

// UnimplementedCableModemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCableModemServiceServer struct{}

func (UnimplementedCableModemServiceServer) ByMac(context.Context, *ByMacRequest) (*ByMacResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByMac not implemented")
}
func (UnimplementedCableModemServiceServer) ByCmts(context.Context, *ByCmtsRequest) (*ByCmtsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByCmts not implemented")
}
func (UnimplementedCableModemServiceServer) ByPoller(context.Context, *ByPollerRequest) (*ByPollerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByPoller not implemented")
}
func (UnimplementedCableModemServiceServer) Paged(context.Context, *PagedRequest) (*PagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paged not implemented")
}
func (UnimplementedCableModemServiceServer) HistoricalRegState(context.Context, *HistoricalRegStateRequest) (*HistoricalRegStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalRegState not implemented")
}
func (UnimplementedCableModemServiceServer) HistoricalCm(context.Context, *HistoricalCmRequest) (*HistoricalCmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalCm not implemented")
}
func (UnimplementedCableModemServiceServer) mustEmbedUnimplementedCableModemServiceServer() {}
func (UnimplementedCableModemServiceServer) testEmbeddedByValue()                           {}

// UnsafeCableModemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CableModemServiceServer will
// result in compilation errors.
type UnsafeCableModemServiceServer interface {
	mustEmbedUnimplementedCableModemServiceServer()
}

func RegisterCableModemServiceServer(s grpc.ServiceRegistrar, srv CableModemServiceServer) {
	// If the following call pancis, it indicates UnimplementedCableModemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CableModemService_ServiceDesc, srv)
}

func _CableModemService_ByMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByMacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableModemServiceServer).ByMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableModemService_ByMac_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableModemServiceServer).ByMac(ctx, req.(*ByMacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableModemService_ByCmts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByCmtsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableModemServiceServer).ByCmts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableModemService_ByCmts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableModemServiceServer).ByCmts(ctx, req.(*ByCmtsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableModemService_ByPoller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByPollerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableModemServiceServer).ByPoller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableModemService_ByPoller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableModemServiceServer).ByPoller(ctx, req.(*ByPollerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableModemService_Paged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableModemServiceServer).Paged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableModemService_Paged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableModemServiceServer).Paged(ctx, req.(*PagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableModemService_HistoricalRegState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalRegStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableModemServiceServer).HistoricalRegState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableModemService_HistoricalRegState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableModemServiceServer).HistoricalRegState(ctx, req.(*HistoricalRegStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableModemService_HistoricalCm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalCmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableModemServiceServer).HistoricalCm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableModemService_HistoricalCm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableModemServiceServer).HistoricalCm(ctx, req.(*HistoricalCmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CableModemService_ServiceDesc is the grpc.ServiceDesc for CableModemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CableModemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cablemodems.CableModemService",
	HandlerType: (*CableModemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ByMac",
			Handler:    _CableModemService_ByMac_Handler,
		},
		{
			MethodName: "ByCmts",
			Handler:    _CableModemService_ByCmts_Handler,
		},
		{
			MethodName: "ByPoller",
			Handler:    _CableModemService_ByPoller_Handler,
		},
		{
			MethodName: "Paged",
			Handler:    _CableModemService_Paged_Handler,
		},
		{
			MethodName: "HistoricalRegState",
			Handler:    _CableModemService_HistoricalRegState_Handler,
		},
		{
			MethodName: "HistoricalCm",
			Handler:    _CableModemService_HistoricalCm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cablemodems/cablemodems.proto",
}
